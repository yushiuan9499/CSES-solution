//generated by chat GPT4o
#include <bits/stdc++.h>
using namespace std;
#define int long long

const int M = 1e9+7;
string s;
int n, k;
vector<string> ss;
vector<int> dp;

struct TrieNode {
    unordered_map<char, TrieNode*> children;
    bool isEndOfWord;
    TrieNode() : isEndOfWord(false) {}
};

void insert(TrieNode* root, const string& word) {
    TrieNode* node = root;
    for (char ch : word) {
        if (node->children.find(ch) == node->children.end()) {
            node->children[ch] = new TrieNode();
        }
        node = node->children[ch];
    }
    node->isEndOfWord = true;
}

signed main() {
    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> s >> k;
    ss.resize(k);
    for (int i = 0; i < k; ++i) {
        cin >> ss[i];
    }
    n = s.size();
    dp.resize(n + 1, 0);
    dp[0] = 1;

    TrieNode* root = new TrieNode();
    for (const string& word : ss) {
        insert(root, word);
    }

    for (int i = 0; i < n; ++i) {
        if (dp[i] == 0) continue;
        TrieNode* node = root;
        for (int j = i; j < n; ++j) {
            if (node->children.find(s[j]) == node->children.end()) break;
            node = node->children[s[j]];
            if (node->isEndOfWord) {
                dp[j + 1] += dp[i];
                dp[j + 1] %= M;
            }
        }
    }

    cout << dp[n] << endl;
    return 0;
}
